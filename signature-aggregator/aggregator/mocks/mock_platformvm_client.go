// Code generated by MockGen. DO NOT EDIT.
// Source: ../avalanchego/vms/platformvm/client.go
//
// Generated by this command:
//
//	mockgen -source=../avalanchego/vms/platformvm/client.go -destination=signature-aggregator/aggregator/mocks/mock_platformvm_client.go -package mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	api "github.com/ava-labs/avalanchego/api"
	ids "github.com/ava-labs/avalanchego/ids"
	validators "github.com/ava-labs/avalanchego/snow/validators"
	rpc "github.com/ava-labs/avalanchego/utils/rpc"
	gas "github.com/ava-labs/avalanchego/vms/components/gas"
	platformvm "github.com/ava-labs/avalanchego/vms/platformvm"
	api0 "github.com/ava-labs/avalanchego/vms/platformvm/api"
	status "github.com/ava-labs/avalanchego/vms/platformvm/status"
	fee "github.com/ava-labs/avalanchego/vms/platformvm/validators/fee"
	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
	isgomock struct{}
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// GetAtomicUTXOs mocks base method.
func (m *MockClient) GetAtomicUTXOs(ctx context.Context, addrs []ids.ShortID, sourceChain string, limit uint32, startAddress ids.ShortID, startUTXOID ids.ID, options ...rpc.Option) ([][]byte, ids.ShortID, ids.ID, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, addrs, sourceChain, limit, startAddress, startUTXOID}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAtomicUTXOs", varargs...)
	ret0, _ := ret[0].([][]byte)
	ret1, _ := ret[1].(ids.ShortID)
	ret2, _ := ret[2].(ids.ID)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetAtomicUTXOs indicates an expected call of GetAtomicUTXOs.
func (mr *MockClientMockRecorder) GetAtomicUTXOs(ctx, addrs, sourceChain, limit, startAddress, startUTXOID any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, addrs, sourceChain, limit, startAddress, startUTXOID}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAtomicUTXOs", reflect.TypeOf((*MockClient)(nil).GetAtomicUTXOs), varargs...)
}

// GetBalance mocks base method.
func (m *MockClient) GetBalance(ctx context.Context, addrs []ids.ShortID, options ...rpc.Option) (*platformvm.GetBalanceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, addrs}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBalance", varargs...)
	ret0, _ := ret[0].(*platformvm.GetBalanceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalance indicates an expected call of GetBalance.
func (mr *MockClientMockRecorder) GetBalance(ctx, addrs any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, addrs}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockClient)(nil).GetBalance), varargs...)
}

// GetBlock mocks base method.
func (m *MockClient) GetBlock(ctx context.Context, blockID ids.ID, options ...rpc.Option) ([]byte, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, blockID}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBlock", varargs...)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlock indicates an expected call of GetBlock.
func (mr *MockClientMockRecorder) GetBlock(ctx, blockID any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, blockID}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlock", reflect.TypeOf((*MockClient)(nil).GetBlock), varargs...)
}

// GetBlockByHeight mocks base method.
func (m *MockClient) GetBlockByHeight(ctx context.Context, height uint64, options ...rpc.Option) ([]byte, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, height}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBlockByHeight", varargs...)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockByHeight indicates an expected call of GetBlockByHeight.
func (mr *MockClientMockRecorder) GetBlockByHeight(ctx, height any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, height}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockByHeight", reflect.TypeOf((*MockClient)(nil).GetBlockByHeight), varargs...)
}

// GetBlockchainStatus mocks base method.
func (m *MockClient) GetBlockchainStatus(ctx context.Context, blockchainID string, options ...rpc.Option) (status.BlockchainStatus, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, blockchainID}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBlockchainStatus", varargs...)
	ret0, _ := ret[0].(status.BlockchainStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockchainStatus indicates an expected call of GetBlockchainStatus.
func (mr *MockClientMockRecorder) GetBlockchainStatus(ctx, blockchainID any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, blockchainID}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockchainStatus", reflect.TypeOf((*MockClient)(nil).GetBlockchainStatus), varargs...)
}

// GetBlockchains mocks base method.
func (m *MockClient) GetBlockchains(ctx context.Context, options ...rpc.Option) ([]platformvm.APIBlockchain, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBlockchains", varargs...)
	ret0, _ := ret[0].([]platformvm.APIBlockchain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockchains indicates an expected call of GetBlockchains.
func (mr *MockClientMockRecorder) GetBlockchains(ctx any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockchains", reflect.TypeOf((*MockClient)(nil).GetBlockchains), varargs...)
}

// GetCurrentL1Validators mocks base method.
func (m *MockClient) GetCurrentL1Validators(ctx context.Context, subnetID ids.ID, nodeIDs []ids.NodeID, options ...rpc.Option) ([]platformvm.APIL1Validator, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, subnetID, nodeIDs}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCurrentL1Validators", varargs...)
	ret0, _ := ret[0].([]platformvm.APIL1Validator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentL1Validators indicates an expected call of GetCurrentL1Validators.
func (mr *MockClientMockRecorder) GetCurrentL1Validators(ctx, subnetID, nodeIDs any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, subnetID, nodeIDs}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentL1Validators", reflect.TypeOf((*MockClient)(nil).GetCurrentL1Validators), varargs...)
}

// GetCurrentSupply mocks base method.
func (m *MockClient) GetCurrentSupply(ctx context.Context, subnetID ids.ID, options ...rpc.Option) (uint64, uint64, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, subnetID}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCurrentSupply", varargs...)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(uint64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetCurrentSupply indicates an expected call of GetCurrentSupply.
func (mr *MockClientMockRecorder) GetCurrentSupply(ctx, subnetID any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, subnetID}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentSupply", reflect.TypeOf((*MockClient)(nil).GetCurrentSupply), varargs...)
}

// GetCurrentValidators mocks base method.
func (m *MockClient) GetCurrentValidators(ctx context.Context, subnetID ids.ID, nodeIDs []ids.NodeID, options ...rpc.Option) ([]platformvm.ClientPermissionlessValidator, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, subnetID, nodeIDs}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCurrentValidators", varargs...)
	ret0, _ := ret[0].([]platformvm.ClientPermissionlessValidator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentValidators indicates an expected call of GetCurrentValidators.
func (mr *MockClientMockRecorder) GetCurrentValidators(ctx, subnetID, nodeIDs any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, subnetID, nodeIDs}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentValidators", reflect.TypeOf((*MockClient)(nil).GetCurrentValidators), varargs...)
}

// GetFeeConfig mocks base method.
func (m *MockClient) GetFeeConfig(ctx context.Context, options ...rpc.Option) (*gas.Config, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFeeConfig", varargs...)
	ret0, _ := ret[0].(*gas.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFeeConfig indicates an expected call of GetFeeConfig.
func (mr *MockClientMockRecorder) GetFeeConfig(ctx any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFeeConfig", reflect.TypeOf((*MockClient)(nil).GetFeeConfig), varargs...)
}

// GetFeeState mocks base method.
func (m *MockClient) GetFeeState(ctx context.Context, options ...rpc.Option) (gas.State, gas.Price, time.Time, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFeeState", varargs...)
	ret0, _ := ret[0].(gas.State)
	ret1, _ := ret[1].(gas.Price)
	ret2, _ := ret[2].(time.Time)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetFeeState indicates an expected call of GetFeeState.
func (mr *MockClientMockRecorder) GetFeeState(ctx any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFeeState", reflect.TypeOf((*MockClient)(nil).GetFeeState), varargs...)
}

// GetHeight mocks base method.
func (m *MockClient) GetHeight(ctx context.Context, options ...rpc.Option) (uint64, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetHeight", varargs...)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHeight indicates an expected call of GetHeight.
func (mr *MockClientMockRecorder) GetHeight(ctx any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHeight", reflect.TypeOf((*MockClient)(nil).GetHeight), varargs...)
}

// GetL1Validator mocks base method.
func (m *MockClient) GetL1Validator(ctx context.Context, validationID ids.ID, options ...rpc.Option) (platformvm.L1Validator, uint64, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, validationID}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetL1Validator", varargs...)
	ret0, _ := ret[0].(platformvm.L1Validator)
	ret1, _ := ret[1].(uint64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetL1Validator indicates an expected call of GetL1Validator.
func (mr *MockClientMockRecorder) GetL1Validator(ctx, validationID any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, validationID}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetL1Validator", reflect.TypeOf((*MockClient)(nil).GetL1Validator), varargs...)
}

// GetMinStake mocks base method.
func (m *MockClient) GetMinStake(ctx context.Context, subnetID ids.ID, options ...rpc.Option) (uint64, uint64, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, subnetID}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMinStake", varargs...)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(uint64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetMinStake indicates an expected call of GetMinStake.
func (mr *MockClientMockRecorder) GetMinStake(ctx, subnetID any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, subnetID}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMinStake", reflect.TypeOf((*MockClient)(nil).GetMinStake), varargs...)
}

// GetProposedHeight mocks base method.
func (m *MockClient) GetProposedHeight(ctx context.Context, options ...rpc.Option) (uint64, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetProposedHeight", varargs...)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProposedHeight indicates an expected call of GetProposedHeight.
func (mr *MockClientMockRecorder) GetProposedHeight(ctx any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProposedHeight", reflect.TypeOf((*MockClient)(nil).GetProposedHeight), varargs...)
}

// GetRewardUTXOs mocks base method.
func (m *MockClient) GetRewardUTXOs(arg0 context.Context, arg1 *api.GetTxArgs, arg2 ...rpc.Option) ([][]byte, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRewardUTXOs", varargs...)
	ret0, _ := ret[0].([][]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRewardUTXOs indicates an expected call of GetRewardUTXOs.
func (mr *MockClientMockRecorder) GetRewardUTXOs(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRewardUTXOs", reflect.TypeOf((*MockClient)(nil).GetRewardUTXOs), varargs...)
}

// GetStake mocks base method.
func (m *MockClient) GetStake(ctx context.Context, addrs []ids.ShortID, validatorsOnly bool, options ...rpc.Option) (map[ids.ID]uint64, [][]byte, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, addrs, validatorsOnly}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetStake", varargs...)
	ret0, _ := ret[0].(map[ids.ID]uint64)
	ret1, _ := ret[1].([][]byte)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetStake indicates an expected call of GetStake.
func (mr *MockClientMockRecorder) GetStake(ctx, addrs, validatorsOnly any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, addrs, validatorsOnly}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStake", reflect.TypeOf((*MockClient)(nil).GetStake), varargs...)
}

// GetStakingAssetID mocks base method.
func (m *MockClient) GetStakingAssetID(ctx context.Context, subnetID ids.ID, options ...rpc.Option) (ids.ID, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, subnetID}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetStakingAssetID", varargs...)
	ret0, _ := ret[0].(ids.ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStakingAssetID indicates an expected call of GetStakingAssetID.
func (mr *MockClientMockRecorder) GetStakingAssetID(ctx, subnetID any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, subnetID}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStakingAssetID", reflect.TypeOf((*MockClient)(nil).GetStakingAssetID), varargs...)
}

// GetSubnet mocks base method.
func (m *MockClient) GetSubnet(ctx context.Context, subnetID ids.ID, options ...rpc.Option) (platformvm.GetSubnetClientResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, subnetID}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSubnet", varargs...)
	ret0, _ := ret[0].(platformvm.GetSubnetClientResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubnet indicates an expected call of GetSubnet.
func (mr *MockClientMockRecorder) GetSubnet(ctx, subnetID any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, subnetID}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubnet", reflect.TypeOf((*MockClient)(nil).GetSubnet), varargs...)
}

// GetSubnets mocks base method.
func (m *MockClient) GetSubnets(ctx context.Context, subnetIDs []ids.ID, options ...rpc.Option) ([]platformvm.ClientSubnet, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, subnetIDs}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSubnets", varargs...)
	ret0, _ := ret[0].([]platformvm.ClientSubnet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubnets indicates an expected call of GetSubnets.
func (mr *MockClientMockRecorder) GetSubnets(ctx, subnetIDs any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, subnetIDs}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubnets", reflect.TypeOf((*MockClient)(nil).GetSubnets), varargs...)
}

// GetTimestamp mocks base method.
func (m *MockClient) GetTimestamp(ctx context.Context, options ...rpc.Option) (time.Time, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTimestamp", varargs...)
	ret0, _ := ret[0].(time.Time)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTimestamp indicates an expected call of GetTimestamp.
func (mr *MockClientMockRecorder) GetTimestamp(ctx any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimestamp", reflect.TypeOf((*MockClient)(nil).GetTimestamp), varargs...)
}

// GetTotalStake mocks base method.
func (m *MockClient) GetTotalStake(ctx context.Context, subnetID ids.ID, options ...rpc.Option) (uint64, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, subnetID}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTotalStake", varargs...)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTotalStake indicates an expected call of GetTotalStake.
func (mr *MockClientMockRecorder) GetTotalStake(ctx, subnetID any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, subnetID}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalStake", reflect.TypeOf((*MockClient)(nil).GetTotalStake), varargs...)
}

// GetTx mocks base method.
func (m *MockClient) GetTx(ctx context.Context, txID ids.ID, options ...rpc.Option) ([]byte, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, txID}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTx", varargs...)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTx indicates an expected call of GetTx.
func (mr *MockClientMockRecorder) GetTx(ctx, txID any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, txID}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTx", reflect.TypeOf((*MockClient)(nil).GetTx), varargs...)
}

// GetTxStatus mocks base method.
func (m *MockClient) GetTxStatus(ctx context.Context, txID ids.ID, options ...rpc.Option) (*platformvm.GetTxStatusResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, txID}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTxStatus", varargs...)
	ret0, _ := ret[0].(*platformvm.GetTxStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTxStatus indicates an expected call of GetTxStatus.
func (mr *MockClientMockRecorder) GetTxStatus(ctx, txID any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, txID}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTxStatus", reflect.TypeOf((*MockClient)(nil).GetTxStatus), varargs...)
}

// GetUTXOs mocks base method.
func (m *MockClient) GetUTXOs(ctx context.Context, addrs []ids.ShortID, limit uint32, startAddress ids.ShortID, startUTXOID ids.ID, options ...rpc.Option) ([][]byte, ids.ShortID, ids.ID, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, addrs, limit, startAddress, startUTXOID}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUTXOs", varargs...)
	ret0, _ := ret[0].([][]byte)
	ret1, _ := ret[1].(ids.ShortID)
	ret2, _ := ret[2].(ids.ID)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetUTXOs indicates an expected call of GetUTXOs.
func (mr *MockClientMockRecorder) GetUTXOs(ctx, addrs, limit, startAddress, startUTXOID any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, addrs, limit, startAddress, startUTXOID}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUTXOs", reflect.TypeOf((*MockClient)(nil).GetUTXOs), varargs...)
}

// GetValidatorFeeConfig mocks base method.
func (m *MockClient) GetValidatorFeeConfig(ctx context.Context, options ...rpc.Option) (*fee.Config, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetValidatorFeeConfig", varargs...)
	ret0, _ := ret[0].(*fee.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValidatorFeeConfig indicates an expected call of GetValidatorFeeConfig.
func (mr *MockClientMockRecorder) GetValidatorFeeConfig(ctx any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValidatorFeeConfig", reflect.TypeOf((*MockClient)(nil).GetValidatorFeeConfig), varargs...)
}

// GetValidatorFeeState mocks base method.
func (m *MockClient) GetValidatorFeeState(ctx context.Context, options ...rpc.Option) (gas.Gas, gas.Price, time.Time, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetValidatorFeeState", varargs...)
	ret0, _ := ret[0].(gas.Gas)
	ret1, _ := ret[1].(gas.Price)
	ret2, _ := ret[2].(time.Time)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetValidatorFeeState indicates an expected call of GetValidatorFeeState.
func (mr *MockClientMockRecorder) GetValidatorFeeState(ctx any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValidatorFeeState", reflect.TypeOf((*MockClient)(nil).GetValidatorFeeState), varargs...)
}

// GetValidatorsAt mocks base method.
func (m *MockClient) GetValidatorsAt(ctx context.Context, subnetID ids.ID, height api0.Height, options ...rpc.Option) (map[ids.NodeID]*validators.GetValidatorOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, subnetID, height}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetValidatorsAt", varargs...)
	ret0, _ := ret[0].(map[ids.NodeID]*validators.GetValidatorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValidatorsAt indicates an expected call of GetValidatorsAt.
func (mr *MockClientMockRecorder) GetValidatorsAt(ctx, subnetID, height any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, subnetID, height}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValidatorsAt", reflect.TypeOf((*MockClient)(nil).GetValidatorsAt), varargs...)
}

// IssueTx mocks base method.
func (m *MockClient) IssueTx(ctx context.Context, tx []byte, options ...rpc.Option) (ids.ID, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, tx}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "IssueTx", varargs...)
	ret0, _ := ret[0].(ids.ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IssueTx indicates an expected call of IssueTx.
func (mr *MockClientMockRecorder) IssueTx(ctx, tx any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, tx}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IssueTx", reflect.TypeOf((*MockClient)(nil).IssueTx), varargs...)
}

// SampleValidators mocks base method.
func (m *MockClient) SampleValidators(ctx context.Context, subnetID ids.ID, sampleSize uint16, options ...rpc.Option) ([]ids.NodeID, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, subnetID, sampleSize}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SampleValidators", varargs...)
	ret0, _ := ret[0].([]ids.NodeID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SampleValidators indicates an expected call of SampleValidators.
func (mr *MockClientMockRecorder) SampleValidators(ctx, subnetID, sampleSize any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, subnetID, sampleSize}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SampleValidators", reflect.TypeOf((*MockClient)(nil).SampleValidators), varargs...)
}

// ValidatedBy mocks base method.
func (m *MockClient) ValidatedBy(ctx context.Context, blockchainID ids.ID, options ...rpc.Option) (ids.ID, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, blockchainID}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ValidatedBy", varargs...)
	ret0, _ := ret[0].(ids.ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidatedBy indicates an expected call of ValidatedBy.
func (mr *MockClientMockRecorder) ValidatedBy(ctx, blockchainID any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, blockchainID}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidatedBy", reflect.TypeOf((*MockClient)(nil).ValidatedBy), varargs...)
}

// Validates mocks base method.
func (m *MockClient) Validates(ctx context.Context, subnetID ids.ID, options ...rpc.Option) ([]ids.ID, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, subnetID}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Validates", varargs...)
	ret0, _ := ret[0].([]ids.ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Validates indicates an expected call of Validates.
func (mr *MockClientMockRecorder) Validates(ctx, subnetID any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, subnetID}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validates", reflect.TypeOf((*MockClient)(nil).Validates), varargs...)
}
