// Code generated by MockGen. DO NOT EDIT.
// Source: canonical_validator_client.go
//
// Generated by this command:
//
//	mockgen -source=canonical_validator_client.go -destination=./mocks/mock_canonical_validator_client.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	ids "github.com/ava-labs/avalanchego/ids"
	validators "github.com/ava-labs/avalanchego/snow/validators"
	gomock "go.uber.org/mock/gomock"
)

// MockCanonicalValidatorState is a mock of CanonicalValidatorState interface.
type MockCanonicalValidatorState struct {
	ctrl     *gomock.Controller
	recorder *MockCanonicalValidatorStateMockRecorder
	isgomock struct{}
}

// MockCanonicalValidatorStateMockRecorder is the mock recorder for MockCanonicalValidatorState.
type MockCanonicalValidatorStateMockRecorder struct {
	mock *MockCanonicalValidatorState
}

// NewMockCanonicalValidatorState creates a new mock instance.
func NewMockCanonicalValidatorState(ctrl *gomock.Controller) *MockCanonicalValidatorState {
	mock := &MockCanonicalValidatorState{ctrl: ctrl}
	mock.recorder = &MockCanonicalValidatorStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCanonicalValidatorState) EXPECT() *MockCanonicalValidatorStateMockRecorder {
	return m.recorder
}

// GetAllValidatorSets mocks base method.
func (m *MockCanonicalValidatorState) GetAllValidatorSets(ctx context.Context, pchainHeight uint64) (map[ids.ID]validators.WarpSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllValidatorSets", ctx, pchainHeight)
	ret0, _ := ret[0].(map[ids.ID]validators.WarpSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllValidatorSets indicates an expected call of GetAllValidatorSets.
func (mr *MockCanonicalValidatorStateMockRecorder) GetAllValidatorSets(ctx, pchainHeight any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllValidatorSets", reflect.TypeOf((*MockCanonicalValidatorState)(nil).GetAllValidatorSets), ctx, pchainHeight)
}

// GetCurrentCanonicalValidatorSet mocks base method.
func (m *MockCanonicalValidatorState) GetCurrentCanonicalValidatorSet(ctx context.Context, subnetID ids.ID) (validators.WarpSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentCanonicalValidatorSet", ctx, subnetID)
	ret0, _ := ret[0].(validators.WarpSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentCanonicalValidatorSet indicates an expected call of GetCurrentCanonicalValidatorSet.
func (mr *MockCanonicalValidatorStateMockRecorder) GetCurrentCanonicalValidatorSet(ctx, subnetID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentCanonicalValidatorSet", reflect.TypeOf((*MockCanonicalValidatorState)(nil).GetCurrentCanonicalValidatorSet), ctx, subnetID)
}

// GetLatestHeight mocks base method.
func (m *MockCanonicalValidatorState) GetLatestHeight(ctx context.Context) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestHeight", ctx)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestHeight indicates an expected call of GetLatestHeight.
func (mr *MockCanonicalValidatorStateMockRecorder) GetLatestHeight(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestHeight", reflect.TypeOf((*MockCanonicalValidatorState)(nil).GetLatestHeight), ctx)
}

// GetSubnetID mocks base method.
func (m *MockCanonicalValidatorState) GetSubnetID(ctx context.Context, blockchainID ids.ID) (ids.ID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubnetID", ctx, blockchainID)
	ret0, _ := ret[0].(ids.ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubnetID indicates an expected call of GetSubnetID.
func (mr *MockCanonicalValidatorStateMockRecorder) GetSubnetID(ctx, blockchainID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubnetID", reflect.TypeOf((*MockCanonicalValidatorState)(nil).GetSubnetID), ctx, blockchainID)
}

// GetValidatorSet mocks base method.
func (m *MockCanonicalValidatorState) GetValidatorSet(ctx context.Context, height uint64, subnetID ids.ID) (map[ids.NodeID]*validators.GetValidatorOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValidatorSet", ctx, height, subnetID)
	ret0, _ := ret[0].(map[ids.NodeID]*validators.GetValidatorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValidatorSet indicates an expected call of GetValidatorSet.
func (mr *MockCanonicalValidatorStateMockRecorder) GetValidatorSet(ctx, height, subnetID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValidatorSet", reflect.TypeOf((*MockCanonicalValidatorState)(nil).GetValidatorSet), ctx, height, subnetID)
}
