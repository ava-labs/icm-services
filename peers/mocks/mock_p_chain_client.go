// Code generated by MockGen. DO NOT EDIT.
// Source: p_chain_client.go
//
// Generated by this command:
//
//	mockgen -source=p_chain_client.go -destination=./mocks/mock_p_chain_client.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	ids "github.com/ava-labs/avalanchego/ids"
	rpc "github.com/ava-labs/avalanchego/utils/rpc"
	platformvm "github.com/ava-labs/avalanchego/vms/platformvm"
	gomock "go.uber.org/mock/gomock"
)

// MockPChainClient is a mock of PChainClient interface.
type MockPChainClient struct {
	ctrl     *gomock.Controller
	recorder *MockPChainClientMockRecorder
	isgomock struct{}
}

// MockPChainClientMockRecorder is the mock recorder for MockPChainClient.
type MockPChainClientMockRecorder struct {
	mock *MockPChainClient
}

// NewMockPChainClient creates a new mock instance.
func NewMockPChainClient(ctrl *gomock.Controller) *MockPChainClient {
	mock := &MockPChainClient{ctrl: ctrl}
	mock.recorder = &MockPChainClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPChainClient) EXPECT() *MockPChainClientMockRecorder {
	return m.recorder
}

// GetCurrentValidators mocks base method.
func (m *MockPChainClient) GetCurrentValidators(ctx context.Context, subnetID ids.ID, nodeIDs []ids.NodeID, options ...rpc.Option) ([]platformvm.ClientPermissionlessValidator, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, subnetID, nodeIDs}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCurrentValidators", varargs...)
	ret0, _ := ret[0].([]platformvm.ClientPermissionlessValidator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentValidators indicates an expected call of GetCurrentValidators.
func (mr *MockPChainClientMockRecorder) GetCurrentValidators(ctx, subnetID, nodeIDs any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, subnetID, nodeIDs}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentValidators", reflect.TypeOf((*MockPChainClient)(nil).GetCurrentValidators), varargs...)
}

// GetSubnet mocks base method.
func (m *MockPChainClient) GetSubnet(ctx context.Context, subnetID ids.ID, options ...rpc.Option) (platformvm.GetSubnetClientResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, subnetID}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSubnet", varargs...)
	ret0, _ := ret[0].(platformvm.GetSubnetClientResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubnet indicates an expected call of GetSubnet.
func (mr *MockPChainClientMockRecorder) GetSubnet(ctx, subnetID any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, subnetID}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubnet", reflect.TypeOf((*MockPChainClient)(nil).GetSubnet), varargs...)
}
