// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ava-labs/avalanchego/network (interfaces: AppRequestNetwork)
//
// Generated by this command:
//
//	mockgen -destination=./avago_mocks/mock_network.go -package=avago_mocks github.com/ava-labs/avalanchego/network AppRequestNetwork
//

// Package avago_mocks is a generated GoMock package.
package avago_mocks

import (
	context "context"
	netip "net/netip"
	reflect "reflect"

	ids "github.com/ava-labs/avalanchego/ids"
	message "github.com/ava-labs/avalanchego/message"
	network "github.com/ava-labs/avalanchego/network"
	peer "github.com/ava-labs/avalanchego/network/peer"
	common "github.com/ava-labs/avalanchego/snow/engine/common"
	subnets "github.com/ava-labs/avalanchego/subnets"
	bloom "github.com/ava-labs/avalanchego/utils/bloom"
	ips "github.com/ava-labs/avalanchego/utils/ips"
	set "github.com/ava-labs/avalanchego/utils/set"
	gomock "go.uber.org/mock/gomock"
)

// MockAppRequestNetwork is a mock of AppRequestNetwork interface.
type MockAppRequestNetwork struct {
	ctrl     *gomock.Controller
	recorder *MockAppRequestNetworkMockRecorder
	isgomock struct{}
}

// MockAppRequestNetworkMockRecorder is the mock recorder for MockAppRequestNetwork.
type MockAppRequestNetworkMockRecorder struct {
	mock *MockAppRequestNetwork
}

// NewMockAppRequestNetwork creates a new mock instance.
func NewMockAppRequestNetwork(ctrl *gomock.Controller) *MockAppRequestNetwork {
	mock := &MockAppRequestNetwork{ctrl: ctrl}
	mock.recorder = &MockAppRequestNetworkMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAppRequestNetwork) EXPECT() *MockAppRequestNetworkMockRecorder {
	return m.recorder
}

// AddSubnet mocks base method.
func (m *MockAppRequestNetwork) AddSubnet(subnetID ids.ID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddSubnet", subnetID)
}

// AddSubnet indicates an expected call of AddSubnet.
func (mr *MockAppRequestNetworkMockRecorder) AddSubnet(subnetID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSubnet", reflect.TypeOf((*MockAppRequestNetwork)(nil).AddSubnet), subnetID)
}

// AllowConnection mocks base method.
func (m *MockAppRequestNetwork) AllowConnection(peerID ids.NodeID) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllowConnection", peerID)
	ret0, _ := ret[0].(bool)
	return ret0
}

// AllowConnection indicates an expected call of AllowConnection.
func (mr *MockAppRequestNetworkMockRecorder) AllowConnection(peerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllowConnection", reflect.TypeOf((*MockAppRequestNetwork)(nil).AllowConnection), peerID)
}

// Connected mocks base method.
func (m *MockAppRequestNetwork) Connected(peerID ids.NodeID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Connected", peerID)
}

// Connected indicates an expected call of Connected.
func (mr *MockAppRequestNetworkMockRecorder) Connected(peerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connected", reflect.TypeOf((*MockAppRequestNetwork)(nil).Connected), peerID)
}

// Disconnected mocks base method.
func (m *MockAppRequestNetwork) Disconnected(peerID ids.NodeID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Disconnected", peerID)
}

// Disconnected indicates an expected call of Disconnected.
func (mr *MockAppRequestNetworkMockRecorder) Disconnected(peerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Disconnected", reflect.TypeOf((*MockAppRequestNetwork)(nil).Disconnected), peerID)
}

// Dispatch mocks base method.
func (m *MockAppRequestNetwork) Dispatch() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dispatch")
	ret0, _ := ret[0].(error)
	return ret0
}

// Dispatch indicates an expected call of Dispatch.
func (mr *MockAppRequestNetworkMockRecorder) Dispatch() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dispatch", reflect.TypeOf((*MockAppRequestNetwork)(nil).Dispatch))
}

// HealthCheck mocks base method.
func (m *MockAppRequestNetwork) HealthCheck(arg0 context.Context) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HealthCheck", arg0)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HealthCheck indicates an expected call of HealthCheck.
func (mr *MockAppRequestNetworkMockRecorder) HealthCheck(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HealthCheck", reflect.TypeOf((*MockAppRequestNetwork)(nil).HealthCheck), arg0)
}

// KnownPeers mocks base method.
func (m *MockAppRequestNetwork) KnownPeers() ([]byte, []byte) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KnownPeers")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].([]byte)
	return ret0, ret1
}

// KnownPeers indicates an expected call of KnownPeers.
func (mr *MockAppRequestNetworkMockRecorder) KnownPeers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KnownPeers", reflect.TypeOf((*MockAppRequestNetwork)(nil).KnownPeers))
}

// ManuallyTrack mocks base method.
func (m *MockAppRequestNetwork) ManuallyTrack(nodeID ids.NodeID, ip netip.AddrPort) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ManuallyTrack", nodeID, ip)
}

// ManuallyTrack indicates an expected call of ManuallyTrack.
func (mr *MockAppRequestNetworkMockRecorder) ManuallyTrack(nodeID, ip any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ManuallyTrack", reflect.TypeOf((*MockAppRequestNetwork)(nil).ManuallyTrack), nodeID, ip)
}

// NodeUptime mocks base method.
func (m *MockAppRequestNetwork) NodeUptime() (network.UptimeResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NodeUptime")
	ret0, _ := ret[0].(network.UptimeResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodeUptime indicates an expected call of NodeUptime.
func (mr *MockAppRequestNetworkMockRecorder) NodeUptime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeUptime", reflect.TypeOf((*MockAppRequestNetwork)(nil).NodeUptime))
}

// PeerInfo mocks base method.
func (m *MockAppRequestNetwork) PeerInfo(nodeIDs []ids.NodeID) []peer.Info {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PeerInfo", nodeIDs)
	ret0, _ := ret[0].([]peer.Info)
	return ret0
}

// PeerInfo indicates an expected call of PeerInfo.
func (mr *MockAppRequestNetworkMockRecorder) PeerInfo(nodeIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PeerInfo", reflect.TypeOf((*MockAppRequestNetwork)(nil).PeerInfo), nodeIDs)
}

// Peers mocks base method.
func (m *MockAppRequestNetwork) Peers(peerID ids.NodeID, trackedSubnets set.Set[ids.ID], requestAllPeers bool, knownPeers *bloom.ReadFilter, peerSalt []byte) []*ips.ClaimedIPPort {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Peers", peerID, trackedSubnets, requestAllPeers, knownPeers, peerSalt)
	ret0, _ := ret[0].([]*ips.ClaimedIPPort)
	return ret0
}

// Peers indicates an expected call of Peers.
func (mr *MockAppRequestNetworkMockRecorder) Peers(peerID, trackedSubnets, requestAllPeers, knownPeers, peerSalt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Peers", reflect.TypeOf((*MockAppRequestNetwork)(nil).Peers), peerID, trackedSubnets, requestAllPeers, knownPeers, peerSalt)
}

// RemoveSubnet mocks base method.
func (m *MockAppRequestNetwork) RemoveSubnet(subnetID ids.ID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveSubnet", subnetID)
}

// RemoveSubnet indicates an expected call of RemoveSubnet.
func (mr *MockAppRequestNetworkMockRecorder) RemoveSubnet(subnetID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveSubnet", reflect.TypeOf((*MockAppRequestNetwork)(nil).RemoveSubnet), subnetID)
}

// Send mocks base method.
func (m *MockAppRequestNetwork) Send(msg message.OutboundMessage, config common.SendConfig, subnetID ids.ID, allower subnets.Allower) set.Set[ids.NodeID] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", msg, config, subnetID, allower)
	ret0, _ := ret[0].(set.Set[ids.NodeID])
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockAppRequestNetworkMockRecorder) Send(msg, config, subnetID, allower any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockAppRequestNetwork)(nil).Send), msg, config, subnetID, allower)
}

// StartClose mocks base method.
func (m *MockAppRequestNetwork) StartClose() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StartClose")
}

// StartClose indicates an expected call of StartClose.
func (mr *MockAppRequestNetworkMockRecorder) StartClose() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartClose", reflect.TypeOf((*MockAppRequestNetwork)(nil).StartClose))
}

// Subnets mocks base method.
func (m *MockAppRequestNetwork) Subnets() set.Set[ids.ID] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subnets")
	ret0, _ := ret[0].(set.Set[ids.ID])
	return ret0
}

// Subnets indicates an expected call of Subnets.
func (mr *MockAppRequestNetworkMockRecorder) Subnets() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subnets", reflect.TypeOf((*MockAppRequestNetwork)(nil).Subnets))
}

// Track mocks base method.
func (m *MockAppRequestNetwork) Track(arg0 []*ips.ClaimedIPPort) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Track", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Track indicates an expected call of Track.
func (mr *MockAppRequestNetworkMockRecorder) Track(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Track", reflect.TypeOf((*MockAppRequestNetwork)(nil).Track), arg0)
}
